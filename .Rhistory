setwd('D:/work3')
# libraries needed
library(ggplot2)
library(cowplot)
library(tidyverse)
# load the data that we are to use here
animal <- read.csv("D:/work3/Animal/Austin_Animal_Center_Intakes.csv",stringsAsFactors = FALSE)
head(animal)
# summary of the data
summary(animal)
library(tydiverse)
library(vroom)
install.packages("vroom")
library(plotly)
install.packages("plotly")
library(dplyr)
library(readr)
animal <- read.csv("D:/work3/Animal/Austin街道经纬度(不全).csv",stringsAsFactors = FALSE)
animal
head(animal)
library(shiny)
# ui object
ui <- fluidPage( )
# server()
server <- function(input, output){ }
# shinyApp()
shinyApp(ui = ui, server = server)
library(shiny)
# ui object
# ui object
ui <- fluidPage(
titlePanel(p("Spatial app", style = "color:#3474A7")),
sidebarLayout(
sidebarPanel(
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com"
), "."),
img(
src = "imageShiny.png",
width = "70px", height = "70px"
)
),
mainPanel("main panel for outputs")
)
)
# server()
# server()
server <- function(input, output){ }
# shinyApp()
shinyApp(ui = ui, server = server)
install.packages("rgdal")
install.packages("DT")
install.packages("dygraphs")
install.packages("xts")
install.packages("leaflet")
library(shiny)
library(rgdal)
library(DT)
library(dygraphs)
library(xts)
library(leaflet)
data <- read.csv("data/data.csv")
map <- readOGR("data/fe_2007_39_county/fe_2007_39_county.shp")
# ui object
ui <- fluidPage(
titlePanel(p("Spatial app", style = "color:#3474A7")),
sidebarLayout(
sidebarPanel(
p("Made with", a("Shiny",
href = "http://shiny.rstudio.com"
), "."),
img(
src = "imageShiny.png",
width = "70px", height = "70px"
)
),
mainPanel(
leafletOutput(outputId = "map"),
dygraphOutput(outputId = "timetrend"),
DTOutput(outputId = "table")
)
)
)
# server()
server <- function(input, output) {
output$table <- renderDT(data)
output$timetrend <- renderDygraph({
dataxts <- NULL
counties <- unique(data$county)
for (l in 1:length(counties)) {
datacounty <- data[data$county == counties[l], ]
dd <- xts(
datacounty[, "cases"],
as.Date(paste0(datacounty$year, "-01-01"))
)
dataxts <- cbind(dataxts, dd)
}
colnames(dataxts) <- counties
dygraph(dataxts) %>%
dyHighlight(highlightSeriesBackgroundAlpha = 0.2) -> d1
d1$x$css <- "
.dygraph-legend > span {display:none;}
.dygraph-legend > span.highlight { display: inline; }
"
d1
})
output$map <- renderLeaflet({
# Add data to map
datafiltered <- data[which(data$year == 1980), ]
ordercounties <- match(map@data$NAME, datafiltered$county)
map@data <- datafiltered[ordercounties, ]
# Create leaflet
pal <- colorBin("YlOrRd", domain = map$cases, bins = 7)
labels <- sprintf("%s: %g", map$county, map$cases) %>%
lapply(htmltools::HTML)
l <- leaflet(map) %>%
addTiles() %>%
addPolygons(
fillColor = ~ pal(cases),
color = "white",
dashArray = "3",
fillOpacity = 0.7,
label = labels
) %>%
leaflet::addLegend(
pal = pal, values = ~cases,
opacity = 0.7, title = NULL
)
})
}
# shinyApp()
shinyApp(ui = ui, server = server)
library(dlookr)
dim(animal)
library(dplyr)
glimpse(animal)
glimpse(animal)
animal <- read.csv("D:/work3/Animal/Austin街道经纬度(不全).csv",stringsAsFactors = FALSE)
head(animal)
glimpse(animal)
# load the data that we are to use here
animal <- read.csv("D:/work3/Animal/Austin_Animal_Center_Intakes.csv",stringsAsFactors = FALSE)
head(animal)
glimpse(animal)
view(animal)
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::install_github("ropensci/visdat")
library(visdat)
install.packages("DataExplorer")
library(DataExplorer)
DataExplorer::create_report(animal)
library(ggplot2)
library(RColorBrewer)
library(ggmap)
install.packages("ggmap")
library(ggmap)
library(maps)
install.packages("maps")
library(maps)
library(rgdal)
library(scales)
library(maptools)
library(gridExtra)
library(rgeos)
install.packages("rgeos")
library(rgeos)
library(maptools)
library(leaflet)
animmapdata <- readShapeSpatial("D:/work3/Animal/Austin街道经纬度(不全).csv")
plot(animmapdata)
library(shiny)
library(leaflet)
library(dplyr)
library(shinycssloaders)
install.packages("shinycssloaders")
shinycssloaders
library(shinycssloaders)
library(rgdal)
library(plotly)
library(htmltools)
library(DT)
library(shinyjs)
install.packages("shinyjs")
ui<-fluidPage(
tags$head(HTML("<title>FAF Comparison </title>")),
useShinyjs(),
br(),
span(style = "font-weight: 600; font-size: 25px; width: 100%;
color: #022DB7;", "Freight Analysis Framework FAF4 vs. FAF5, Year 2017"),
br(),br(),
fluidRow(
column(8, leafletOutput("Zone", height = "550px")%>% withSpinner(color="#0dc5c1")),
column(4,
span("Select "), span( style="color:green", "Origin"), span(" and "),
span( style="color:red", "Destination"),
span(" from the map:"),
br(),br(),
htmlOutput("od_info")%>% withSpinner(color="#0dc5c1"),
hr(),
htmlOutput("od_total")%>% withSpinner(color="#0dc5c1"),
hr(),
htmlOutput("od_total_5")%>% withSpinner(color="#0dc5c1")
)
),
br(),br(),
fluidRow(
column(9, div(DT::dataTableOutput("od_vol"),  width = "100%", style = "font-size:100%"))
),
fluidRow(
column(5, plotlyOutput("od_ton_chart", width = "100%", height = "350px")%>%
withSpinner(color="#0dc5c1")),
column(3, plotlyOutput("od_ton_pie", width = "100%", height = "250px")%>%
withSpinner(color="#0dc5c1")),
column(3, plotlyOutput("od_ton_pie_5", width = "100%", height = "250px")%>%
withSpinner(color="#0dc5c1"))
),
hr(),
fluidRow(
column(5, plotlyOutput("od_value_chart", width = "100%", height = "350px")%>%
withSpinner(color="#0dc5c1")),
column(3, plotlyOutput("od_value_pie", width = "100%", height = "250px")%>%
withSpinner(color="#0dc5c1")),
column(3, plotlyOutput("od_value_pie_5", width = "100%", height = "250px")%>%
withSpinner(color="#0dc5c1"))
)
ufos <- read_csv("D:/work3/Animal/Austin街道经纬度(不全).csv") %>%
select(LATITUDE, LONGITUDE, ADDRESS)
ufos <- read_csv("D:/work3/Animal/Austin街道经纬度(不全).csv") %>%
select(ADDRESS, LATITUDE, LONGITUDE)
ufos <- read_csv("D:/work3/Animal/Austin街道经纬度(不全).csv") %>%
select(ADDRESS, LATITUDE, LONGITUDE)
ufos <- read.csv("D:/work3/Animal/Austin街道经纬度(不全).csv") %>%
select(ADDRESS, LATITUDE, LONGITUDE)
geo_properties <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
showsubunits = FALSE,
landcolor = toRGB("gray10"),
showlakes = TRUE,
lakecolor = toRGB('white')
)
ufo.fig = plot_geo(ufos, lat = ~latitude, lon = ~longitude,
marker = list(size = 2, color = "#ffffcc", opacity = 0.25)) %>%
add_markers(hoverinfo = "none") %>%
config(displayModeBar = FALSE) %>%
layout(geo = geo_properties)
ufo.fig
ufo.fig = plot_geo(ufos, lat = ~LATITUDE, lon = ~LONGITUDE,
marker = list(size = 2, color = "#ffffcc", opacity = 0.25)) %>%
add_markers(hoverinfo = "none") %>%
config(displayModeBar = FALSE) %>%
layout(geo = geo_properties)
ufo.fig
